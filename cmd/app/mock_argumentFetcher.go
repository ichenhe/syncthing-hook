// Code generated by mockery v2.36.0. DO NOT EDIT.

package main

import mock "github.com/stretchr/testify/mock"

// MockargumentFetcher is an autogenerated mock type for the argumentFetcher type
type MockargumentFetcher struct {
	mock.Mock
}

type MockargumentFetcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockargumentFetcher) EXPECT() *MockargumentFetcher_Expecter {
	return &MockargumentFetcher_Expecter{mock: &_m.Mock}
}

// GetCommandLineArgs provides a mock function with given fields:
func (_m *MockargumentFetcher) GetCommandLineArgs() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockargumentFetcher_GetCommandLineArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCommandLineArgs'
type MockargumentFetcher_GetCommandLineArgs_Call struct {
	*mock.Call
}

// GetCommandLineArgs is a helper method to define mock.On call
func (_e *MockargumentFetcher_Expecter) GetCommandLineArgs() *MockargumentFetcher_GetCommandLineArgs_Call {
	return &MockargumentFetcher_GetCommandLineArgs_Call{Call: _e.mock.On("GetCommandLineArgs")}
}

func (_c *MockargumentFetcher_GetCommandLineArgs_Call) Run(run func()) *MockargumentFetcher_GetCommandLineArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockargumentFetcher_GetCommandLineArgs_Call) Return(_a0 []string) *MockargumentFetcher_GetCommandLineArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockargumentFetcher_GetCommandLineArgs_Call) RunAndReturn(run func() []string) *MockargumentFetcher_GetCommandLineArgs_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockargumentFetcher creates a new instance of MockargumentFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockargumentFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockargumentFetcher {
	mock := &MockargumentFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
