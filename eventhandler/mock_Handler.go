// Code generated by mockery v2.36.0. DO NOT EDIT.

package eventhandler

import (
	extevent "SyncthingHook/extevent"

	mock "github.com/stretchr/testify/mock"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Destroy provides a mock function with given fields:
func (_m *MockHandler) Destroy() {
	_m.Called()
}

// MockHandler_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type MockHandler_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
func (_e *MockHandler_Expecter) Destroy() *MockHandler_Destroy_Call {
	return &MockHandler_Destroy_Call{Call: _e.mock.On("Destroy")}
}

func (_c *MockHandler_Destroy_Call) Run(run func()) *MockHandler_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_Destroy_Call) Return() *MockHandler_Destroy_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Destroy_Call) RunAndReturn(run func()) *MockHandler_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// GetNext provides a mock function with given fields:
func (_m *MockHandler) GetNext() Handler {
	ret := _m.Called()

	var r0 Handler
	if rf, ok := ret.Get(0).(func() Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Handler)
		}
	}

	return r0
}

// MockHandler_GetNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNext'
type MockHandler_GetNext_Call struct {
	*mock.Call
}

// GetNext is a helper method to define mock.On call
func (_e *MockHandler_Expecter) GetNext() *MockHandler_GetNext_Call {
	return &MockHandler_GetNext_Call{Call: _e.mock.On("GetNext")}
}

func (_c *MockHandler_GetNext_Call) Run(run func()) *MockHandler_GetNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHandler_GetNext_Call) Return(_a0 Handler) *MockHandler_GetNext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHandler_GetNext_Call) RunAndReturn(run func() Handler) *MockHandler_GetNext_Call {
	_c.Call.Return(run)
	return _c
}

// Handle provides a mock function with given fields: event
func (_m *MockHandler) Handle(event *extevent.Event) {
	_m.Called(event)
}

// MockHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - event *extevent.Event
func (_e *MockHandler_Expecter) Handle(event interface{}) *MockHandler_Handle_Call {
	return &MockHandler_Handle_Call{Call: _e.mock.On("Handle", event)}
}

func (_c *MockHandler_Handle_Call) Run(run func(event *extevent.Event)) *MockHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*extevent.Event))
	})
	return _c
}

func (_c *MockHandler_Handle_Call) Return() *MockHandler_Handle_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Handle_Call) RunAndReturn(run func(*extevent.Event)) *MockHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// SetNext provides a mock function with given fields: next
func (_m *MockHandler) SetNext(next Handler) {
	_m.Called(next)
}

// MockHandler_SetNext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNext'
type MockHandler_SetNext_Call struct {
	*mock.Call
}

// SetNext is a helper method to define mock.On call
//   - next Handler
func (_e *MockHandler_Expecter) SetNext(next interface{}) *MockHandler_SetNext_Call {
	return &MockHandler_SetNext_Call{Call: _e.mock.On("SetNext", next)}
}

func (_c *MockHandler_SetNext_Call) Run(run func(next Handler)) *MockHandler_SetNext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Handler))
	})
	return _c
}

func (_c *MockHandler_SetNext_Call) Return() *MockHandler_SetNext_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_SetNext_Call) RunAndReturn(run func(Handler)) *MockHandler_SetNext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
