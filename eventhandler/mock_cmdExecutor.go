// Code generated by mockery v2.36.0. DO NOT EDIT.

package eventhandler

import mock "github.com/stretchr/testify/mock"

// MockcmdExecutor is an autogenerated mock type for the cmdExecutor type
type MockcmdExecutor struct {
	mock.Mock
}

type MockcmdExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockcmdExecutor) EXPECT() *MockcmdExecutor_Expecter {
	return &MockcmdExecutor_Expecter{mock: &_m.Mock}
}

// exec provides a mock function with given fields: name, arg
func (_m *MockcmdExecutor) exec(name string, arg ...string) error {
	_va := make([]interface{}, len(arg))
	for _i := range arg {
		_va[_i] = arg[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...string) error); ok {
		r0 = rf(name, arg...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockcmdExecutor_exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'exec'
type MockcmdExecutor_exec_Call struct {
	*mock.Call
}

// exec is a helper method to define mock.On call
//   - name string
//   - arg ...string
func (_e *MockcmdExecutor_Expecter) exec(name interface{}, arg ...interface{}) *MockcmdExecutor_exec_Call {
	return &MockcmdExecutor_exec_Call{Call: _e.mock.On("exec",
		append([]interface{}{name}, arg...)...)}
}

func (_c *MockcmdExecutor_exec_Call) Run(run func(name string, arg ...string)) *MockcmdExecutor_exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockcmdExecutor_exec_Call) Return(_a0 error) *MockcmdExecutor_exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockcmdExecutor_exec_Call) RunAndReturn(run func(string, ...string) error) *MockcmdExecutor_exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockcmdExecutor creates a new instance of MockcmdExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockcmdExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockcmdExecutor {
	mock := &MockcmdExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
