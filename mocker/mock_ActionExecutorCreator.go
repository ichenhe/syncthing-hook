// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocker

import (
	domain "SyncthingHook/domain"

	mock "github.com/stretchr/testify/mock"
)

// MockActionExecutorCreator is an autogenerated mock type for the ActionExecutorCreator type
type MockActionExecutorCreator struct {
	mock.Mock
}

type MockActionExecutorCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActionExecutorCreator) EXPECT() *MockActionExecutorCreator_Expecter {
	return &MockActionExecutorCreator_Expecter{mock: &_m.Mock}
}

// CreateExecutor provides a mock function with given fields: action, hookDef
func (_m *MockActionExecutorCreator) CreateExecutor(action *domain.HookAction, hookDef *domain.HookDefinition) (domain.EventHandler, error) {
	ret := _m.Called(action, hookDef)

	var r0 domain.EventHandler
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.HookAction, *domain.HookDefinition) (domain.EventHandler, error)); ok {
		return rf(action, hookDef)
	}
	if rf, ok := ret.Get(0).(func(*domain.HookAction, *domain.HookDefinition) domain.EventHandler); ok {
		r0 = rf(action, hookDef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.EventHandler)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.HookAction, *domain.HookDefinition) error); ok {
		r1 = rf(action, hookDef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockActionExecutorCreator_CreateExecutor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateExecutor'
type MockActionExecutorCreator_CreateExecutor_Call struct {
	*mock.Call
}

// CreateExecutor is a helper method to define mock.On call
//   - action *domain.HookAction
//   - hookDef *domain.HookDefinition
func (_e *MockActionExecutorCreator_Expecter) CreateExecutor(action interface{}, hookDef interface{}) *MockActionExecutorCreator_CreateExecutor_Call {
	return &MockActionExecutorCreator_CreateExecutor_Call{Call: _e.mock.On("CreateExecutor", action, hookDef)}
}

func (_c *MockActionExecutorCreator_CreateExecutor_Call) Run(run func(action *domain.HookAction, hookDef *domain.HookDefinition)) *MockActionExecutorCreator_CreateExecutor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.HookAction), args[1].(*domain.HookDefinition))
	})
	return _c
}

func (_c *MockActionExecutorCreator_CreateExecutor_Call) Return(_a0 domain.EventHandler, _a1 error) *MockActionExecutorCreator_CreateExecutor_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockActionExecutorCreator_CreateExecutor_Call) RunAndReturn(run func(*domain.HookAction, *domain.HookDefinition) (domain.EventHandler, error)) *MockActionExecutorCreator_CreateExecutor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockActionExecutorCreator creates a new instance of MockActionExecutorCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActionExecutorCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActionExecutorCreator {
	mock := &MockActionExecutorCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
