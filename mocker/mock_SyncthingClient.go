// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocker

import (
	domain "SyncthingHook/domain"

	mock "github.com/stretchr/testify/mock"
	events "github.com/syncthing/syncthing/lib/events"
)

// MockSyncthingClient is an autogenerated mock type for the SyncthingClient type
type MockSyncthingClient struct {
	mock.Mock
}

type MockSyncthingClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSyncthingClient) EXPECT() *MockSyncthingClient_Expecter {
	return &MockSyncthingClient_Expecter{mock: &_m.Mock}
}

// GetDiskEvents provides a mock function with given fields: since, timeout, limit
func (_m *MockSyncthingClient) GetDiskEvents(since int, timeout int, limit int) ([]events.Event, error) {
	ret := _m.Called(since, timeout, limit)

	var r0 []events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, int) ([]events.Event, error)); ok {
		return rf(since, timeout, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int, int) []events.Event); ok {
		r0 = rf(since, timeout, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, int) error); ok {
		r1 = rf(since, timeout, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncthingClient_GetDiskEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDiskEvents'
type MockSyncthingClient_GetDiskEvents_Call struct {
	*mock.Call
}

// GetDiskEvents is a helper method to define mock.On call
//   - since int
//   - timeout int
//   - limit int
func (_e *MockSyncthingClient_Expecter) GetDiskEvents(since interface{}, timeout interface{}, limit interface{}) *MockSyncthingClient_GetDiskEvents_Call {
	return &MockSyncthingClient_GetDiskEvents_Call{Call: _e.mock.On("GetDiskEvents", since, timeout, limit)}
}

func (_c *MockSyncthingClient_GetDiskEvents_Call) Run(run func(since int, timeout int, limit int)) *MockSyncthingClient_GetDiskEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockSyncthingClient_GetDiskEvents_Call) Return(_a0 []events.Event, _a1 error) *MockSyncthingClient_GetDiskEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncthingClient_GetDiskEvents_Call) RunAndReturn(run func(int, int, int) ([]events.Event, error)) *MockSyncthingClient_GetDiskEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function with given fields: eventTypes, since, timeout, limit
func (_m *MockSyncthingClient) GetEvents(eventTypes []events.EventType, since int, timeout int, limit int) ([]events.Event, error) {
	ret := _m.Called(eventTypes, since, timeout, limit)

	var r0 []events.Event
	var r1 error
	if rf, ok := ret.Get(0).(func([]events.EventType, int, int, int) ([]events.Event, error)); ok {
		return rf(eventTypes, since, timeout, limit)
	}
	if rf, ok := ret.Get(0).(func([]events.EventType, int, int, int) []events.Event); ok {
		r0 = rf(eventTypes, since, timeout, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]events.Event)
		}
	}

	if rf, ok := ret.Get(1).(func([]events.EventType, int, int, int) error); ok {
		r1 = rf(eventTypes, since, timeout, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncthingClient_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockSyncthingClient_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//   - eventTypes []events.EventType
//   - since int
//   - timeout int
//   - limit int
func (_e *MockSyncthingClient_Expecter) GetEvents(eventTypes interface{}, since interface{}, timeout interface{}, limit interface{}) *MockSyncthingClient_GetEvents_Call {
	return &MockSyncthingClient_GetEvents_Call{Call: _e.mock.On("GetEvents", eventTypes, since, timeout, limit)}
}

func (_c *MockSyncthingClient_GetEvents_Call) Run(run func(eventTypes []events.EventType, since int, timeout int, limit int)) *MockSyncthingClient_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]events.EventType), args[1].(int), args[2].(int), args[3].(int))
	})
	return _c
}

func (_c *MockSyncthingClient_GetEvents_Call) Return(_a0 []events.Event, _a1 error) *MockSyncthingClient_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncthingClient_GetEvents_Call) RunAndReturn(run func([]events.EventType, int, int, int) ([]events.Event, error)) *MockSyncthingClient_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemStatus provides a mock function with given fields:
func (_m *MockSyncthingClient) GetSystemStatus() (*domain.SystemStatus, error) {
	ret := _m.Called()

	var r0 *domain.SystemStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() (*domain.SystemStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *domain.SystemStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.SystemStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSyncthingClient_GetSystemStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemStatus'
type MockSyncthingClient_GetSystemStatus_Call struct {
	*mock.Call
}

// GetSystemStatus is a helper method to define mock.On call
func (_e *MockSyncthingClient_Expecter) GetSystemStatus() *MockSyncthingClient_GetSystemStatus_Call {
	return &MockSyncthingClient_GetSystemStatus_Call{Call: _e.mock.On("GetSystemStatus")}
}

func (_c *MockSyncthingClient_GetSystemStatus_Call) Run(run func()) *MockSyncthingClient_GetSystemStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSyncthingClient_GetSystemStatus_Call) Return(_a0 *domain.SystemStatus, _a1 error) *MockSyncthingClient_GetSystemStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSyncthingClient_GetSystemStatus_Call) RunAndReturn(run func() (*domain.SystemStatus, error)) *MockSyncthingClient_GetSystemStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeEvent provides a mock function with given fields: eventTypes, since
func (_m *MockSyncthingClient) SubscribeEvent(eventTypes []events.EventType, since int) <-chan events.Event {
	ret := _m.Called(eventTypes, since)

	var r0 <-chan events.Event
	if rf, ok := ret.Get(0).(func([]events.EventType, int) <-chan events.Event); ok {
		r0 = rf(eventTypes, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan events.Event)
		}
	}

	return r0
}

// MockSyncthingClient_SubscribeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeEvent'
type MockSyncthingClient_SubscribeEvent_Call struct {
	*mock.Call
}

// SubscribeEvent is a helper method to define mock.On call
//   - eventTypes []events.EventType
//   - since int
func (_e *MockSyncthingClient_Expecter) SubscribeEvent(eventTypes interface{}, since interface{}) *MockSyncthingClient_SubscribeEvent_Call {
	return &MockSyncthingClient_SubscribeEvent_Call{Call: _e.mock.On("SubscribeEvent", eventTypes, since)}
}

func (_c *MockSyncthingClient_SubscribeEvent_Call) Run(run func(eventTypes []events.EventType, since int)) *MockSyncthingClient_SubscribeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]events.EventType), args[1].(int))
	})
	return _c
}

func (_c *MockSyncthingClient_SubscribeEvent_Call) Return(_a0 <-chan events.Event) *MockSyncthingClient_SubscribeEvent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSyncthingClient_SubscribeEvent_Call) RunAndReturn(run func([]events.EventType, int) <-chan events.Event) *MockSyncthingClient_SubscribeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// UnsubscribeEvent provides a mock function with given fields: eventCh
func (_m *MockSyncthingClient) UnsubscribeEvent(eventCh <-chan events.Event) {
	_m.Called(eventCh)
}

// MockSyncthingClient_UnsubscribeEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsubscribeEvent'
type MockSyncthingClient_UnsubscribeEvent_Call struct {
	*mock.Call
}

// UnsubscribeEvent is a helper method to define mock.On call
//   - eventCh <-chan events.Event
func (_e *MockSyncthingClient_Expecter) UnsubscribeEvent(eventCh interface{}) *MockSyncthingClient_UnsubscribeEvent_Call {
	return &MockSyncthingClient_UnsubscribeEvent_Call{Call: _e.mock.On("UnsubscribeEvent", eventCh)}
}

func (_c *MockSyncthingClient_UnsubscribeEvent_Call) Run(run func(eventCh <-chan events.Event)) *MockSyncthingClient_UnsubscribeEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(<-chan events.Event))
	})
	return _c
}

func (_c *MockSyncthingClient_UnsubscribeEvent_Call) Return() *MockSyncthingClient_UnsubscribeEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockSyncthingClient_UnsubscribeEvent_Call) RunAndReturn(run func(<-chan events.Event)) *MockSyncthingClient_UnsubscribeEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSyncthingClient creates a new instance of MockSyncthingClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSyncthingClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSyncthingClient {
	mock := &MockSyncthingClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
