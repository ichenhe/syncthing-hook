// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocker

import (
	domain "github.com/ichenhe/syncthing-hook/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockHookManager is an autogenerated mock type for the HookManager type
type MockHookManager struct {
	mock.Mock
}

type MockHookManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookManager) EXPECT() *MockHookManager_Expecter {
	return &MockHookManager_Expecter{mock: &_m.Mock}
}

// RegisterHook provides a mock function with given fields: hook, hookDef
func (_m *MockHookManager) RegisterHook(hook *domain.Hook, hookDef *domain.HookDefinition) error {
	ret := _m.Called(hook, hookDef)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Hook, *domain.HookDefinition) error); ok {
		r0 = rf(hook, hookDef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockHookManager_RegisterHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHook'
type MockHookManager_RegisterHook_Call struct {
	*mock.Call
}

// RegisterHook is a helper method to define mock.On call
//   - hook *domain.Hook
//   - hookDef *domain.HookDefinition
func (_e *MockHookManager_Expecter) RegisterHook(hook interface{}, hookDef interface{}) *MockHookManager_RegisterHook_Call {
	return &MockHookManager_RegisterHook_Call{Call: _e.mock.On("RegisterHook", hook, hookDef)}
}

func (_c *MockHookManager_RegisterHook_Call) Run(run func(hook *domain.Hook, hookDef *domain.HookDefinition)) *MockHookManager_RegisterHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Hook), args[1].(*domain.HookDefinition))
	})
	return _c
}

func (_c *MockHookManager_RegisterHook_Call) Return(_a0 error) *MockHookManager_RegisterHook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHookManager_RegisterHook_Call) RunAndReturn(run func(*domain.Hook, *domain.HookDefinition) error) *MockHookManager_RegisterHook_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterAll provides a mock function with given fields:
func (_m *MockHookManager) UnregisterAll() {
	_m.Called()
}

// MockHookManager_UnregisterAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterAll'
type MockHookManager_UnregisterAll_Call struct {
	*mock.Call
}

// UnregisterAll is a helper method to define mock.On call
func (_e *MockHookManager_Expecter) UnregisterAll() *MockHookManager_UnregisterAll_Call {
	return &MockHookManager_UnregisterAll_Call{Call: _e.mock.On("UnregisterAll")}
}

func (_c *MockHookManager_UnregisterAll_Call) Run(run func()) *MockHookManager_UnregisterAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHookManager_UnregisterAll_Call) Return() *MockHookManager_UnregisterAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHookManager_UnregisterAll_Call) RunAndReturn(run func()) *MockHookManager_UnregisterAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookManager creates a new instance of MockHookManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookManager {
	mock := &MockHookManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
